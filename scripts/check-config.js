const fs = require('fs');
const path = require('path');

console.log('üîç Verificando configuraci√≥n de LeanPass...\n');

// Verificar archivo .env.local
const envPath = path.join(process.cwd(), '.env.local');
const envExists = fs.existsSync(envPath);

console.log('üìÅ Archivo .env.local:', envExists ? '‚úÖ Existe' : '‚ùå No encontrado');

if (envExists) {
  // Cargar variables de entorno
  require('dotenv').config({ path: envPath });
  
  console.log('\nüîß Variables de entorno:');
  console.log('- MONGODB_URI:', process.env.MONGODB_URI ? '‚úÖ Configurado' : '‚ùå No configurado');
  console.log('- JWT_SECRET:', process.env.JWT_SECRET ? '‚úÖ Configurado' : '‚ùå No configurado');
  console.log('- OPENROUTER_API_KEY:', process.env.OPENROUTER_API_KEY ? '‚úÖ Configurado' : '‚ùå No configurado');
  
  // Verificar formato de MongoDB URI
  if (process.env.MONGODB_URI) {
    const uri = process.env.MONGODB_URI;
    if (uri.includes('<username>') || uri.includes('<password>') || uri.includes('<cluster>')) {
      console.log('‚ö†Ô∏è  MONGODB_URI contiene placeholders. Reemplaza <username>, <password> y <cluster> con valores reales.');
    } else if (uri.startsWith('mongodb://') || uri.startsWith('mongodb+srv://')) {
      console.log('‚úÖ Formato de MONGODB_URI v√°lido');
    } else {
      console.log('‚ùå Formato de MONGODB_URI inv√°lido');
    }
  }
} else {
  console.log('\nüìù Para crear el archivo .env.local, copia este contenido:');
  console.log('---');
  console.log('# MongoDB Configuration');
  console.log('MONGODB_URI=mongodb+srv://<username>:<password>@<cluster>.mongodb.net/leanpass?retryWrites=true&w=majority');
  console.log('JWT_SECRET=tu-clave-secreta-super-segura-aqui');
  console.log('OPENROUTER_API_KEY=tu-openrouter-api-key-aqui');
  console.log('---');
}

// Verificar dependencias
console.log('\nüì¶ Verificando dependencias...');
try {
  require('mongoose');
  console.log('- mongoose: ‚úÖ Instalado');
} catch {
  console.log('- mongoose: ‚ùå No instalado');
}

try {
  require('bcryptjs');
  console.log('- bcryptjs: ‚úÖ Instalado');
} catch {
  console.log('- bcryptjs: ‚ùå No instalado');
}

try {
  require('jsonwebtoken');
  console.log('- jsonwebtoken: ‚úÖ Instalado');
} catch {
  console.log('- jsonwebtoken: ‚ùå No instalado');
}

console.log('\nüöÄ Pr√≥ximos pasos:');
if (!envExists) {
  console.log('1. Crear archivo .env.local con la configuraci√≥n de MongoDB');
  console.log('2. Configurar MongoDB Atlas o MongoDB local');
  console.log('3. Reiniciar la aplicaci√≥n con: npm run dev');
} else {
  console.log('1. Verificar que MongoDB est√© accesible');
  console.log('2. Reiniciar la aplicaci√≥n si es necesario');
  console.log('3. Registrar un usuario desde la interfaz web');
}

console.log('\nüìñ Para m√°s informaci√≥n, consulta: CONFIGURACION_MONGODB.md'); 